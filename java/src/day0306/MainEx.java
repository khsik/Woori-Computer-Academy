package day0306;
/*
	컬렉션 프레임워크
	- java.util. 패키지에서는 컬렉션 프레임워크 가장 중요
	- 컬렉션 인터페이스를 구현하고 있는 모든 인터페이스들 Collection<E>를 조상으로 두고 있다.
	- 컬렉션 : 수집. 데이터의 보관 방법. 배열과 비슷(여러개의 값 보관)
	- 배열의 단점을 보완. 세가지로 나뉜다. (List, Set, Map 인터페이스)
	
	배열의 단점
	- 저장할 수 있는 객체의 수가 배열을 생성할 때 결정된다.
	 즉, 정해진 메모리가 생성
		: 컬렉션 프레임워크는 정해지지 않음
	- 객체 삭제했을 때 해당 인덱스가 비게 됨 (전체적 index 는 유지, 해당 index 내부만 삭제)
		: 컬렉션 프레임워크는 당겨져 채워짐 (해당 위치채로 삭제 후 당겨짐)
	- 들어가는 값의 타입이 지정되어 있음
		-> 불특정 다수의 객체 저장하기에 문제가 있음
		: 컬렉션은 모든 타입 가능
		: <E> 제네릭 으로 타입 지정 가능

	List 인터페이스
		- 순서 유지 -> index 사용
		- 값의 중복 허용
		
		구현 클래스
		: ArrayList

	Set 인터페이스
		- 저장 순서 없음
		- 객체 중복저장 불가 (오류는 안남)
		
		구현 클래스
		: HashSet
		: TreeSet 
			정렬 기능
			프로그래밍에서 제일 비효율적
			데이터의 양이 많을수록 느려짐 -> 쓰지마라...
		
	Map 인터페이스
		- 저장 순서 없음
		- 컬렉션에서 값을 저장하는 두가지 방법
			1) 값만 저장 : List, Set
			2) 값에 이름을 붙여 저장 : Map
		- Key 와 Value 라는 형식으로 저장 (Key + Value 하나의 Entry 라고 한다)
		- Key 중복 허용하지 않음
		- Value 중복 허용
		
		구현 클래스
		: HashMap
		: TreeMap
	
	Stack
		- First In Last Out (Last In First Out)
		- 순서대로 쌓이기만 함. (순서는 있지만 index 없음)
	
	Queue
		- First In First Out (Last In Last Out)
		- 선입선출
	
*/
public class MainEx {

}
