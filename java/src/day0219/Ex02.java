package day0219;

public class Ex02 {
/*
	* 생성자
		- new 연산자와 같이 사용되어 클래스로부터 객체를 생성할 때 호출되어
		  객체의 초기화 담당
			객체의 초기화 : 클래스 변수를 초기화, 
						 메서드를 호출해서 객체를 사용할 준비를 하는것
	
	* 기본 생성자
		- 모든 클래스는 반드시 하나 이상의 생성자를 가진다.
		- 클래스 내부에서 생성자를 생략했다면 컴파일러는 기본생성자를 자동으로 추가시킨다.
		- 매개변수가 있는 생성자를 만든다면 기본생성자 사용 불가능(자동으로 추가 안되서)
			이때, 기본생성자를 만들면 사용 가능
	
	* 생성자 선언
		클래스(매개변수, ...){
			객체의 초기화 코드
		}
		: 클래스 이름과 동일
		  메서드 형태와 유사하다
		  리턴타입 없다
		  
	* 매개변수 유/무	
		- 매개변수 선언 생략 가능
		- 여러개 선언 가능
		- new 연산자로 생성자를 호출(사용)할 때
		  외부의 값을 생성자 {}영역 내부로 전달하는 역할 
		
	* 클래스 변수 초기화
		- 클래스로부터 객체가 생성될 때 기본 초기값으로 자동설정
		- 다른 값으로 초기화하는 두가지 방법
			1) 클래스 변수에 선언과 동시에 대입(초기화)
				: 동일한 클래스로부터 생성되는 객체들은 모두 같은 데이터를 갖게 된다. 
				대입으로 변경 가능
			2) 생성자 초기화
				: 객체 생성 시 외부에서 제공되는 다양한 값들로 초기화 되어야 할 때 사용
				: 생성자는 매개값으로 값들을 받아서 초기화 한다
		
	* this.
		- 매개변수의 이름이 너무 짧으면 가독성이 좋지 않음
		 가능하면 초기화시킬 클래스 변수의 이름과 동일하게 사용할 것을 권장함
		- 이때, 매개변수와 클래스변수의 이름이 같아서
		 생성자 내부에서 해당 클래스변수로 접근 불가
		 지역변수의 특성으로 매개변수의 사용 우선순위가 높기 때문 
		- this : 객체 자신을 참조
		 : 객체 자신을 this 라고 한다.
		 
	* 생성자 오버로딩(overloading)
		- 매개변수를 달리하는 생성자를 여러개 선언하는 것을 말함
		- 외부로부터 제공되는 다양한 데이터들을 이용해서 객체를 초기화 하려면
		  생성자도 다양화 할 필요가 있다.
		예) Car 객체에서 model 데이터 제공, model & color 제공
		- 다양한 방법으로 객체를 생성할 수 있도록 생성자 오버로딩 제공
		- 매개변수의 타입, 순서, 개수 같을 경우 오버로딩 아님
		 변수의 이름 상관 없음.
		 
	* 다른 생성자 호출(사용)
		this()
		- 생성자 오버로딩이 많아지면 중복되는 코드들이 발생.
		- 매개변수의 개수만 다르고 초기화 내용이 비슷한 경우
		 이때, 클래스 변수의 초기화 코드를 가지고 있는 생성자를 호출해서 사용한다.
		  : 하나의 생성자에 초기화 코드를 집중적으로 작성,
		   나머지 생성자는 초기화 코드를 가지고 있는 생성자를 호출해서 사용한다.
		- 생성자에서 다른 생성자를 호출할 때 사용이 된다.
		
		클래스()매개변수, ...{
			this(매개변수, ..., 값);
			실행문;
		}
		
	* this. / this()
		- 반드시 생성자 내부의 첫줄에 사용.
		
*/	
}
